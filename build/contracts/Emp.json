{
  "contractName": "Emp",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "faucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"faucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/Mocks/Emp.sol\":\"Emp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/Mocks/Context.sol\":{\"keccak256\":\"0x4b579c4c10eeb79984babc9a77e31fa1d8f52fdfecfd63f397329bbed3586c5a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d37cc027c136a7a2290b7781d31ab9a80375955e374f54f1a95392ef5e370c3b\",\"dweb:/ipfs/QmUG1gyNYV5G6b6mjxuKzQLf62ogxBo7Nqa2nQbsRxJ3YL\"]},\"project:/contracts/Mocks/ERC20.sol\":{\"keccak256\":\"0xe3a81b89f0bebe242cb71dff37e7f25f66acba35fc01dbf9943b559a4851e5ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab4a80bdce84f7d7041d2d03a3f83f981ca400f4acd73cc32150a93f50e9b049\",\"dweb:/ipfs/QmRupDXf5gpGB6gTycFRf3XESqnXteLJ6siDxECZfACmBh\"]},\"project:/contracts/Mocks/ERC20Detailed.sol\":{\"keccak256\":\"0xba7507dcadad23a68b5cd0051115979c10c473108ecd7a92bd8f2dc8c29292c4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5d3e265c7d8e01b5d151aa8474299aee3bfb001d555febd843b74b603595659b\",\"dweb:/ipfs/QmPs6yf43AvgZ3h9Ec7UdmQhA5s599Dc7ex6QfouFrtfCk\"]},\"project:/contracts/Mocks/Emp.sol\":{\"keccak256\":\"0x740244fe63bacb28ff0138abb4623c9541534a6aa298f6e9746ec9c6843efa58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://34207c1d4687fcf6ed4b97debcb308244cd63b6c8a4faa3ae5ee2976d98f2586\",\"dweb:/ipfs/QmUZi86Y3aonqJTubW3py5AvxZJDTaNUwzuaYgNrorMU7h\"]},\"project:/contracts/Mocks/IERC20.sol\":{\"keccak256\":\"0xa777cfea3c8b692207288f106045a4fad5b40dd4931ed6e5d3493aaac5bf61f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ad2d3a399aaf84419c92a312a34a0e9d8828575fd8d4dccde4c01d211b72495\",\"dweb:/ipfs/QmXBLbrGP3MyZo8UEm4aSHYkEajqLbNtfiAq8JKsmWyNF9\"]},\"project:/contracts/Mocks/IERC20Metadata.sol\":{\"keccak256\":\"0x5fafa68fe9d4be962aea3a052c92e449346db800296ea3763e35186cc39dd4af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a842243cb2c2872b12bda54a739f64f211866d544287f132583ca4899d4a3cf1\",\"dweb:/ipfs/QmVu8vcVERA8wUjsV6gYLE7FRPXKUYF8s8KJzvEJwHFktp\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./ERC20Detailed.sol\";\r\n\r\nabstract contract Emp is ERC20, ERC20Detailed {\r\n\r\n  constructor() ERC20Detailed(\"EMP\", \"Empyrean\", 18) {}\r\n\r\n  function faucet(address to, uint amount) external {\r\n    _mint(to, amount);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// pragma solidity ^0.8.18;\r\n\r\n// contract Emp { \r\n    \r\n//     using EmpSafeMath for uint256;\r\n\r\n//     mapping (address => uint256) private _balances;\r\n//     mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n//     string private constant name = \"Empyrean\";\r\n//     string private constant symbol = \"EMP\";\r\n//     uint8 private decimals = 18;\r\n//     uint256 private _totalSupply;\r\n\r\n//     event Transfer(address indexed from, address indexed to, uint256 value);\r\n//     event Approval(address indexed owner,address indexed spender,uint256 value);\r\n\r\n//     function Name() public pure returns(string memory) {\r\n//         return name;\r\n//     }\r\n\r\n//     function Symbol() public pure returns(string memory) {\r\n//         return symbol;\r\n//     }\r\n\r\n//     function Decimals() public view returns(uint8) {\r\n//         return decimals;\r\n//     }\r\n\r\n//     function totalSupply() public view returns (uint256) {\r\n//         return _totalSupply;\r\n//     }\r\n\r\n//     function balanceOf(address account) public view returns (uint256) {\r\n//         return _balances[account];\r\n//     }\r\n\r\n//     function _msgSender() internal view returns (address) {\r\n//         return address(msg.sender);\r\n//     }\r\n\r\n//     function _msgData() internal view returns (bytes memory) {\r\n//         this;\r\n//         return msg.data;\r\n//     }\r\n\r\n//     function transfer(address recipient, uint256 amount) public returns (bool) {\r\n//         _transfer(_msgSender(), recipient, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     function allowance(address owner, address spender) public view returns (uint256) {\r\n//         return _allowances[owner][spender];\r\n//     }\r\n\r\n//     function approve(address spender, uint256 amount) public returns (bool) {\r\n//         _approve(_msgSender(), spender, amount);\r\n//         return true;\r\n//     }\r\n\r\n//     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n//         _transfer(sender, recipient, amount);\r\n//         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n//         return true;\r\n//     }\r\n\r\n//     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n//         return true;\r\n//     }\r\n\r\n//     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n//         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n//         return true;\r\n//     }\r\n\r\n\r\n//     function _transfer(address sender, address recipient, uint256 amount) internal {\r\n//         require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n//         require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n//         _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n//         _balances[recipient] = _balances[recipient].add(amount);\r\n//         emit Transfer(sender, recipient, amount);\r\n//     }\r\n\r\n//     function _mint(address account, uint256 amount) internal {\r\n//         require(account != address(0), \"ERC20: mint to the zero address\");\r\n    \r\n//         _totalSupply = _totalSupply.add(amount);\r\n//         _balances[account] = _balances[account].add(amount);\r\n//         emit Transfer(address(0), account, amount);\r\n//     }\r\n\r\n//     function faucet(address to, uint256 amount) external {\r\n//         _mint(to, amount);\r\n//     }\r\n\r\n//     function _burn(address account, uint256 amount) internal {\r\n//         require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n//         _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n//         _totalSupply = _totalSupply.sub(amount);\r\n//         emit Transfer(account, address(0), amount);\r\n//     }\r\n\r\n//     function _approve(address owner, address spender, uint256 amount) internal {\r\n//         require(owner != address(0), \"ERC20: approve from the zero address\");\r\n//         require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n//         _allowances[owner][spender] = amount;\r\n//         emit Approval(owner, spender, amount);\r\n//     }\r\n\r\n//     function _burnFrom(address account, uint256 amount) internal {\r\n//         _burn(account, amount);\r\n//         _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n//     }\r\n// }\r\n\r\n// library EmpSafeMath {\r\n\r\n//     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         unchecked {\r\n//             uint256 c = a + b;\r\n//             if (c < a) return (false, 0);\r\n//             return (true, c);\r\n//         }\r\n//     }\r\n\r\n//     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         unchecked {\r\n//             if (b > a) return (false, 0);\r\n//             return (true, a - b);\r\n//         }\r\n//     }\r\n\r\n//     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         unchecked {\r\n//             if (a == 0) return (true, 0);\r\n//             uint256 c = a * b;\r\n//             if (c / a != b) return (false, 0);\r\n//             return (true, c);\r\n//         }\r\n//     }\r\n\r\n//     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         unchecked {\r\n//             if (b == 0) return (false, 0);\r\n//             return (true, a / b);\r\n//         }\r\n//     }\r\n\r\n//     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n//         unchecked {\r\n//             if (b == 0) return (false, 0);\r\n//             return (true, a % b);\r\n//         }\r\n//     }\r\n\r\n//     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a + b;\r\n//     }\r\n\r\n//     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a - b;\r\n//     }\r\n\r\n//     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a * b;\r\n//     }\r\n\r\n//     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a / b;\r\n//     }\r\n\r\n//     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n//         return a % b;\r\n//     }\r\n\r\n//     function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         unchecked {\r\n//             require(b <= a, errorMessage);\r\n//             return a - b;\r\n//         }\r\n//     }\r\n\r\n//     function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         unchecked {\r\n//             require(b > 0, errorMessage);\r\n//             return a / b;\r\n//         }\r\n//     }\r\n\r\n//     function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n//         unchecked {\r\n//             require(b > 0, errorMessage);\r\n//             return a % b;\r\n//         }\r\n//     }\r\n// }\r\n",
  "sourcePath": "C:\\Users\\binod\\Desktop\\DecentralizedExchange\\contracts\\Mocks\\Emp.sol",
  "ast": {
    "absolutePath": "project:/contracts/Mocks/Emp.sol",
    "exportedSymbols": {
      "Context": [
        983
      ],
      "ERC20": [
        1551
      ],
      "ERC20Detailed": [
        1609
      ],
      "Emp": [
        1640
      ],
      "IERC20": [
        2527
      ],
      "IERC20Metadata": [
        2548
      ]
    },
    "id": 1641,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1611,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".18"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:24:6"
      },
      {
        "absolutePath": "project:/contracts/Mocks/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 1612,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1641,
        "sourceUnit": 1552,
        "src": "61:21:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/Mocks/ERC20Detailed.sol",
        "file": "./ERC20Detailed.sol",
        "id": 1613,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1641,
        "sourceUnit": 1610,
        "src": "84:29:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 1614,
              "name": "ERC20",
              "nameLocations": [
                "142:5:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1551,
              "src": "142:5:6"
            },
            "id": 1615,
            "nodeType": "InheritanceSpecifier",
            "src": "142:5:6"
          },
          {
            "baseName": {
              "id": 1616,
              "name": "ERC20Detailed",
              "nameLocations": [
                "149:13:6"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1609,
              "src": "149:13:6"
            },
            "id": 1617,
            "nodeType": "InheritanceSpecifier",
            "src": "149:13:6"
          }
        ],
        "canonicalName": "Emp",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": false,
        "id": 1640,
        "linearizedBaseContracts": [
          1640,
          1609,
          1551,
          2548,
          2527,
          983
        ],
        "name": "Emp",
        "nameLocation": "135:3:6",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1625,
              "nodeType": "Block",
              "src": "221:2:6",
              "statements": []
            },
            "id": 1626,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "454d50",
                    "id": 1620,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "198:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_c8094d6ba45c6eca8ea3c9b3a9e650543750272b5be5c98a83352b73fad609bb",
                      "typeString": "literal_string \"EMP\""
                    },
                    "value": "EMP"
                  },
                  {
                    "hexValue": "456d70797265616e",
                    "id": 1621,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "205:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_c43d0777308922172a3a833b867165cedda0875348d9e818f3e61595bf8a9c50",
                      "typeString": "literal_string \"Empyrean\""
                    },
                    "value": "Empyrean"
                  },
                  {
                    "hexValue": "3138",
                    "id": 1622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "217:2:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  }
                ],
                "id": 1623,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 1619,
                  "name": "ERC20Detailed",
                  "nameLocations": [
                    "184:13:6"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1609,
                  "src": "184:13:6"
                },
                "nodeType": "ModifierInvocation",
                "src": "184:36:6"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1618,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "181:2:6"
            },
            "returnParameters": {
              "id": 1624,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "221:0:6"
            },
            "scope": 1640,
            "src": "170:53:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1638,
              "nodeType": "Block",
              "src": "279:30:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1634,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1628,
                        "src": "292:2:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1635,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1630,
                        "src": "296:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1633,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1373,
                      "src": "286:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1636,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "286:17:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1637,
                  "nodeType": "ExpressionStatement",
                  "src": "286:17:6"
                }
              ]
            },
            "functionSelector": "7b56c2b2",
            "id": 1639,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "faucet",
            "nameLocation": "238:6:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1631,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1628,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "253:2:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "245:10:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1627,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "245:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1630,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "262:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1639,
                  "src": "257:11:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1629,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "257:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "244:25:6"
            },
            "returnParameters": {
              "id": 1632,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "279:0:6"
            },
            "scope": 1640,
            "src": "229:80:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1641,
        "src": "117:195:6",
        "usedErrors": []
      }
    ],
    "src": "33:7472:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.18+commit.87f61d96.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.12",
  "updatedAt": "2023-03-03T08:18:40.920Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}